name: Commit Discussion on GitHub 

on:
  push:
    branches:
      - main # Triggers when a commit is pushed to the 'main' branch.

jobs:
  create-discussion:
    name: Create GitHub Discussion
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Get Commit Details
        run: |
          echo "Fetching commit details..."
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_HASH=$(git log -1 --pretty=format:"%H")
          AUTHOR_NAME=$(git log -1 --pretty=format:"%an")
          AUTHOR_GITHUB=$(git log -1 --pretty=format:"%ae")
    
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Commit Hash: $COMMIT_HASH"
          echo "Author: $AUTHOR_NAME <$AUTHOR_GITHUB>"
    
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "AUTHOR_NAME=$AUTHOR_NAME" >> $GITHUB_ENV
          echo "AUTHOR_GITHUB=$AUTHOR_GITHUB" >> $GITHUB_ENV

      - name: Get Repository and Category ID
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.event.repository.name }}

          echo "Fetching repository and category IDs..."
          
          RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v4+json" \
            -H "Content-Type: application/json" \
            --data '{"query": "query { repository(owner: \"'$REPO_OWNER'\", name: \"'$REPO_NAME'\") { id discussions(first: 1) { edges { node { category { id name } } } } } }"}' \
            https://api.github.com/graphql)

          echo "API Response: $RESPONSE"

          REPO_ID=$(echo "$RESPONSE" | jq -r '.data.repository.id // empty')
          CATEGORY_ID=$(echo "$RESPONSE" | jq -r '.data.repository.discussions.edges[0].node.category.id // empty')

          if [[ -z "$REPO_ID" ]]; then
            echo "Error: Repository ID not found."
            exit 1
          fi

          if [[ -z "$CATEGORY_ID" ]]; then
            echo "Error: Category ID not found."
            exit 1
          fi

          echo "REPO_ID=$REPO_ID" >> $GITHUB_ENV
          echo "CATEGORY_ID=$CATEGORY_ID" >> $GITHUB_ENV

      - name: Fetch Workflow Logs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching logs from GitHub Actions..."

          RUN_ID=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=1" | \
            jq -r '.workflow_runs[0].id // empty')

          if [[ -z "$RUN_ID" ]]; then
            echo "Error: Could not retrieve workflow run ID."
            exit 1
          fi

          echo "Run ID: $RUN_ID"

          LOGS_URL="https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/logs"

          LOGS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "$LOGS_URL")

          if [[ -z "$LOGS" ]]; then
            echo "Error: Could not retrieve logs."
            exit 1
          fi

          echo "Workflow Logs Fetched Successfully"

          echo "LOGS=$LOGS" >> $GITHUB_ENV

      - name: Create Discussion in GitHub
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_ID: ${{ env.REPO_ID }}
          CATEGORY_ID: ${{ env.CATEGORY_ID }}
          LOGS: ${{ env.LOGS }}
        run: |
          echo "Creating discussion in GitHub..."
          
          GRAPHQL_QUERY=$(jq -n \
            --arg repoId "$REPO_ID" \
            --arg categoryId "$CATEGORY_ID" \
            --arg title "New Commit: $COMMIT_MESSAGE" \
            --arg body "*Commit Details:*\n\n- **Commit Hash:** $COMMIT_HASH\n- **Author:** $AUTHOR_NAME (<$AUTHOR_GITHUB>)\n- **Commit Message:** $COMMIT_MESSAGE\n\n*Workflow Logs (last 50 lines):*\n\n\`\`\`\n$(echo "$LOGS" | tail -n 50)\n\`\`\`" \
            '{ "query": "mutation createDiscussion($repoId: ID!, $categoryId: ID!, $title: String!, $body: String!) { createDiscussion(input: {repositoryId: $repoId, categoryId: $categoryId, title: $title, body: $body}) { discussion { id } } }", "variables": { "repoId": $repoId, "categoryId": $categoryId, "title": $title, "body": $body } }')

          echo "GraphQL Query: $GRAPHQL_QUERY"

          curl -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v4+json" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY" \
            https://api.github.com/graphql
