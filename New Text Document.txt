Dockerfile for hoarding front end :-


# Use the official ubuntu base image
FROM ubuntu:latest

# Set environment variables
ENV NODE_VERSION 20.x

# Install necessary packages
RUN apt-get update && \
    apt-get install -y curl && \
    apt-get install -y gnupg2 && \
    curl -sL https://deb.nodesource.com/setup_$NODE_VERSION | bash - && \
    apt-get install -y nodejs

# Create app directory
WORKDIR /usr/src/app

# Install npm dependencies
COPY package*.json ./
RUN npm install

# Copy the rest of the application
COPY . .

# Build the application
RUN npm i sharp
RUN npm run build

# Expose the port on which your React.js/Next.js app will run (if needed)
#EXPOSE 3000

# Command to run the application
CMD ["npm", "run", "dev"]






docker-compose:-


version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - .:/usr/src/app
    environment:
      - NODE_VERSION=20.x
    # command: npm run dev

#  nginx:
#    image: nginx:latest
#    ports:
#      - "8085:80"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
#    depends_on:
#      - app



package.json:-



{
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next src",
    "start": "next start"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@mui/icons-material": "^5.15.20",
    "@mui/lab": "^5.0.0-alpha.165",
    "@mui/material": "^5.15.19",
    "@mui/x-date-pickers": "^6.19.4",
    "@reduxjs/toolkit": "^2.1.0",
    "axios": "^1.6.7",
    "date-fns": "^3.3.1",
    "dayjs": "^1.11.10",
    "google-map-react": "^2.2.1",
    "material-react-table": "^2.12.1",
    "next": "^13.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-dropzone": "^14.2.3",
    "react-image-gallery": "^1.3.0",
    "react-redux": "^9.1.0",
    "react-router-dom": "^6.23.1",
    "react-slick": "^0.30.2",
    "react-zoom-pan-pinch": "^3.4.2",
    "redux": "^5.0.1",
    "redux-persist": "^6.0.0",
    "redux-saga": "^1.3.0",
    "sass": "^1.74.1",
    "sharp": "^0.33.5",
    "slick-carousel": "^1.8.1",
    "swiper": "^11.0.6",
    "swr": "^2.2.5"
  },
  "engines": {
    "node": ">=18"
  },
  "devDependencies": {
    "css-loader": "^6.10.0",
    "sass-loader": "^14.1.0",
    "style-loader": "^3.3.4"
  }
}


@@@@@@@@@@     src/.env.local


NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=AIzaSyAsacUZN4q9OX8lKQBDeQpP6Nq7MlHlToM
NEXT_PUBLIC_API_BASE_URL=https://api.hoardingstudio.com



/////////////nginx default.conf ////


server {
 #   listen [::]:443 ssl http2 default_server;
    server_name www.hoardingstudio.com;

    location / {
        proxy_pass http://43.205.200.157:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "*";
        add_header Access-Control-Allow-Headers "*";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Security-Policy "upgrade-insecure-requests";
        proxy_headers_hash_max_size 1024; 
  }

   location /_next/webpack-hmr {
        proxy_pass http://127.0.0.1:3000/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        }
    location /__webpack-hmr {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        }



    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/www.hoardingstudio.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/www.hoardingstudio.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    
    server_name api.hoardingstudio.com;

    location / {
        proxy_pass http://43.205.200.157:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_headers_hash_max_size 1024;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.hoardingstudio.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.hoardingstudio.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = api.hoardingstudio.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    
    server_name api.hoardingstudio.com;
    return 404; # managed by Certbot


}
server {
    if ($host = www.hoardingstudio.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name www.hoardingstudio.com;
    listen 80;
    return 404; # managed by Certbot


}
